{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"link",
				"link_videos_existing"
			],
			[
				"link_",
				"link_images_existing"
			]
		]
	},
	"buffers":
	[
		{
			"file": "drive_fetch_resilient.py",
			"settings":
			{
				"buffer_size": 5757,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA9FgAAIyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwojIGRyaXZlX2ZldGNoX3Jlc2lsaWVudC5weSB2MS4xMCDigJQgMjAyNS0xMC0wMQojIE1pbmltYWwgd3JhcHBlciBmb3IgdGhlIG1vZHVsYXIgZGZyIGJhY2tlbmQgcGFja2FnZQoKaW1wb3J0IG9zLCB0aW1lLCBzaWduYWwsIGxvZ2dpbmcsIHBsYXRmb3JtCmZyb20gdHlwaW5nIGltcG9ydCBMaXN0LCBEaWN0LCBPcHRpb25hbApmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgKZnJvbSBkYXRhY2xhc3NlcyBpbXBvcnQgZGF0YWNsYXNzLCBmaWVsZAoKQVBQX05BTUUgPSAiT250YWhvb2REb3dubG9hZGVyIgoKZGVmIF9kZWZhdWx0X3N1cHBvcnRfZGlyKCkgLT4gUGF0aDoKICAgIGlmIHBsYXRmb3JtLnN5c3RlbSgpID09ICJEYXJ3aW4iOiAgIyBtYWNPUwogICAgICAgIHJldHVybiBQYXRoLmhvbWUoKSAvICJMaWJyYXJ5IiAvICJBcHBsaWNhdGlvbiBTdXBwb3J0IiAvIEFQUF9OQU1FCiAgICBpZiBwbGF0Zm9ybS5zeXN0ZW0oKSA9PSAiV2luZG93cyI6CiAgICAgICAgYmFzZSA9IFBhdGgob3MuZW52aXJvbi5nZXQoIkFQUERBVEEiLCBQYXRoLmhvbWUoKSAvICJBcHBEYXRhIiAvICJSb2FtaW5nIikpCiAgICAgICAgcmV0dXJuIGJhc2UgLyBBUFBfTkFNRQogICAgIyBMaW51eCBhbmQgb3RoZXJzCiAgICByZXR1cm4gUGF0aChvcy5lbnZpcm9uLmdldCgiWERHX0NPTkZJR19IT01FIiwgUGF0aC5ob21lKCkgLyAiLmNvbmZpZyIpKSAvIEFQUF9OQU1FCgpTVVBQT1JUX0RJUiA9IF9kZWZhdWx0X3N1cHBvcnRfZGlyKCkKU1VQUE9SVF9ESVIubWtkaXIocGFyZW50cz1UcnVlLCBleGlzdF9vaz1UcnVlKQoKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLSBSdW50aW1lIG9wdGlvbnMgKHNoYXJlZCB3aXRoIGRmciBtb2R1bGVzKSAtLS0tLS0tLS0tLS0tLS0tLS0tLQpDUkVERU5USUFMU19GSUxFID0gb3MuZW52aXJvbi5nZXQoIkNSRURFTlRJQUxTX0ZJTEUiLCAiY3JlZGVudGlhbHMuanNvbiIpClRPS0VOX0ZJTEUgICAgICAgPSBvcy5lbnZpcm9uLmdldCgiVE9LRU5fRklMRSIsIHN0cihTVVBQT1JUX0RJUiAvICJ0b2tlbi5qc29uIikpCk9VVFBVVF9ESVIgICAgICAgPSBvcy5lbnZpcm9uLmdldCgiT1VUUFVUX0RJUiIsICIuL291dHB1dCIpCgpJTUFHRV9XSURUSCAgICAgICAgICAgICAgPSA0MDAKT1ZFUldSSVRFICAgICAgICAgICAgICAgID0gRmFsc2UKUk9CVVNUX1JFU1VNRSAgICAgICAgICAgID0gVHJ1ZQpET1dOTE9BRF9WSURFT1MgICAgICAgICAgPSBUcnVlCkRPV05MT0FEX0lNQUdFU19PUklHSU5BTCA9IEZhbHNlCkNPTlZFUlRfVEhVTUJTX0RJUiAgICAgICA9ICIiICAgIyBpZiBzZXQgdG8gYSBsb2NhbCBmb2xkZXIgcGF0aCwgY29udmVydCBtYXRjaGluZyB0aHVtYm5haWxzIHRvIG9yaWdpbmFscwpQQVVTRSAgICAgICAgICAgICAgICAgICAgPSBGYWxzZSAgIyBGbG93IGNvbnRyb2wgZm9yIEdVSQoKTE9HX0xFVkVMICAgICAgICA9ICJJTkZPIgpMT0dfRklMRU5BTUUgICAgID0gImRyaXZlX2ZldGNoLmxvZyIKTE9HX01BWF9CWVRFUyAgICA9IDEwICogMTAyNCAqIDEwMjQKTE9HX0JBQ0tVUFMgICAgICA9IDMKRk9MREVSX1VSTFM6IExpc3Rbc3RyXSA9IFtdCgojIExpbmsgc3VtbWFyaWVzIGFuZCByZXRyeSBzdXBwb3J0CkxJTktfU1VNTUFSSUVTOiBMaXN0W0RpY3RdID0gW10KRkFJTEVEX0lURU1TOiBMaXN0W0RpY3RdID0gW10KRElSRUNUX1RBU0tTOiBPcHRpb25hbFtMaXN0W0RpY3RdXSA9IE5vbmUKCkNPTkNVUlJFTkNZID0gaW50KG9zLmVudmlyb24uZ2V0KCJDT05DVVJSRU5DWSIsICIzIikpCkxBTkcgPSAiZW4iICAjIExhbmd1YWdlIGZvciBsb2dzICgiZW4iIG9yICJpZCIpCgpTQ09QRVMgPSBbImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvZHJpdmUucmVhZG9ubHkiXQoKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLSBTaGFyZWQgY291bnRlcnMvc3RhdGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0KCkBkYXRhY2xhc3MKY2xhc3MgQ291bnRlcnM6CiAgICBzY2FubmVkOiBpbnQgPSAwCiAgICBpbWFnZXNfZG9uZTogaW50ID0gMAogICAgaW1hZ2VzX3NraXBwZWQ6IGludCA9IDAKICAgIGltYWdlc19mYWlsZWQ6IGludCA9IDAKICAgIHZpZGVvc19kb25lOiBpbnQgPSAwCiAgICB2aWRlb3Nfc2tpcHBlZDogaW50ID0gMAogICAgdmlkZW9zX2ZhaWxlZDogaW50ID0gMAogICAgZGF0YV9kb25lOiBpbnQgPSAwCiAgICBkYXRhX3NraXBwZWQ6IGludCA9IDAKICAgIGRhdGFfZmFpbGVkOiBpbnQgPSAwCiAgICBieXRlc193cml0dGVuOiBpbnQgPSAwCgpAZGF0YWNsYXNzCmNsYXNzIFRvdGFsczoKICAgIGdyYW5kOiBDb3VudGVycyA9IGZpZWxkKGRlZmF1bHRfZmFjdG9yeT1Db3VudGVycykKICAgIHBlcl9mb2xkZXI6IERpY3Rbc3RyLCBDb3VudGVyc10gPSBmaWVsZChkZWZhdWx0X2ZhY3Rvcnk9ZGljdCkKICAgIGRlZiBmb2xkZXIoc2VsZiwga2V5OiBzdHIpIC0+IENvdW50ZXJzOgogICAgICAgIGlmIGtleSBub3QgaW4gc2VsZi5wZXJfZm9sZGVyOgogICAgICAgICAgICBzZWxmLnBlcl9mb2xkZXJba2V5XSA9IENvdW50ZXJzKCkKICAgICAgICByZXR1cm4gc2VsZi5wZXJfZm9sZGVyW2tleV0KClRPVEFMUyA9IFRvdGFscygpClNUQVJUX1RTID0gdGltZS50aW1lKCkKSU5URVJSVVBURUQgPSBGYWxzZQpFWFBFQ1RFRF9JTUFHRVMgPSAwCkVYUEVDVEVEX1ZJREVPUyA9IDAKRVhQRUNURURfREFUQSA9IDAKQUxSRUFEWV9IQVZFX0lNQUdFUyA9IDAKQUxSRUFEWV9IQVZFX1ZJREVPUyA9IDAKQUxSRUFEWV9IQVZFX0RBVEEgPSAwCkVYUEVDVEVEX1RPVEFMX0JZVEVTID0gMApJTkNPTVBMRVRFX1RBUkdFVFMgPSBzZXQoKQoKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLSBpMThuIGhlbHBlciAtLS0tLS0tLS0tLS0tLS0tLS0tLQoKZGVmIEwoZW46IHN0ciwgaWRfOiBzdHIpIC0+IHN0cjoKICAgICIiIlJldHVybiBFbmdsaXNoIG9yIEluZG9uZXNpYW4gc3RyaW5nIGJhc2VkIG9uIExBTkcuIiIiCiAgICByZXR1cm4gZW4gaWYgKExBTkcgb3IgImVuIikubG93ZXIoKS5zdGFydHN3aXRoKCJlbiIpIGVsc2UgaWRfCgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tIFNpZ25hbCBoYW5kbGluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLQoKZGVmIG9uX3NpZ2ludChfc2lnLCBfZnJhbWUpOgogICAgZ2xvYmFsIElOVEVSUlVQVEVECiAgICBJTlRFUlJVUFRFRCA9IFRydWUKICAgIGxvZ2dpbmcud2FybmluZyhMKAogICAgICAgICJSZWNlaXZlZCBpbnRlcnJ1cHQgc2lnbmFsIOKAlCBmaW5pc2hpbmcgY3VycmVudCBzdGVwIGFuZCBzdW1tYXJpemluZy4uLiIsCiAgICAgICAgIk1lbmVyaW1hIHNpbnlhbCBpbnRlcnVwc2kg4oCUIG1lbnllbGVzYWlrYW4gbGFuZ2thaCBzYWF0IGluaSBsYWx1IG1lcmluZ2thcy4uLiIKICAgICkpCgpzaWduYWwuc2lnbmFsKHNpZ25hbC5TSUdJTlQsIG9uX3NpZ2ludCkKCmRlZiByZXNldF9jb3VudGVycygpOgogICAgIiIiUmVzZXQgYWxsIGdsb2JhbCBjb3VudGVycyBhbmQgc3RhdGUuIiIiCiAgICBnbG9iYWwgVE9UQUxTLCBFWFBFQ1RFRF9JTUFHRVMsIEVYUEVDVEVEX1ZJREVPUywgRVhQRUNURURfREFUQQogICAgZ2xvYmFsIEFMUkVBRFlfSEFWRV9JTUFHRVMsIEFMUkVBRFlfSEFWRV9WSURFT1MsIEFMUkVBRFlfSEFWRV9EQVRBICAKICAgIGdsb2JhbCBTVEFSVF9UUywgSU5URVJSVVBURUQsIExJTktfU1VNTUFSSUVTLCBGQUlMRURfSVRFTVMsIEVYUEVDVEVEX1RPVEFMX0JZVEVTCiAgICBUT1RBTFMgPSBUb3RhbHMoKQogICAgRVhQRUNURURfSU1BR0VTID0gMAogICAgRVhQRUNURURfVklERU9TID0gMAogICAgRVhQRUNURURfREFUQSA9IDAKICAgIEFMUkVBRFlfSEFWRV9JTUFHRVMgPSAwCiAgICBBTFJFQURZX0hBVkVfVklERU9TID0gMAogICAgQUxSRUFEWV9IQVZFX0RBVEEgPSAwCiAgICBFWFBFQ1RFRF9UT1RBTF9CWVRFUyA9IDAKICAgIFNUQVJUX1RTID0gdGltZS50aW1lKCkKICAgIElOVEVSUlVQVEVEID0gRmFsc2UKICAgIExJTktfU1VNTUFSSUVTID0gW10KICAgIEZBSUxFRF9JVEVNUyA9IFtdCgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tIE1haW4gZW50cnkgcG9pbnRzIC0tLS0tLS0tLS0tLS0tLS0tLS0tCgpkZWYgbWFpbigpOgogICAgIiIiTWFpbiBlbnRyeSBwb2ludCAtIGRlbGVnYXRlIHRvIG1vZHVsYXIgZGZyLm1haW4uIiIiCiAgICBmcm9tIGRmci5tYWluIGltcG9ydCBtYWluIGFzIGRmcl9tYWluCiAgICByZXR1cm4gZGZyX21haW4oKQoKZGVmIGdldF90b3RhbHNfc25hcHNob3QoKSAtPiBEaWN0OgogICAgIiIiR2V0IHRvdGFscyBzbmFwc2hvdCAtIGRlbGVnYXRlIHRvIG1vZHVsYXIgZGZyLnV0aWxzLiIiIgogICAgZnJvbSBkZnIudXRpbHMgaW1wb3J0IGdldF90b3RhbHNfc25hcHNob3QgYXMgZGZyX2dldF90b3RhbHMKICAgIHJldHVybiBkZnJfZ2V0X3RvdGFscygpCgpkZWYgZ2V0X2ZhaWxlZF9pdGVtcygpIC0+IExpc3RbRGljdF06CiAgICAiIiJHZXQgbGlzdCBvZiBmYWlsZWQgZG93bmxvYWQgaXRlbXMuIiIiCiAgICByZXR1cm4gbGlzdChGQUlMRURfSVRFTVMpCgpkZWYgc2V0X2RpcmVjdF90YXNrcyh0YXNrczogTGlzdFtEaWN0XSk6CiAgICAiIiJTZXQgZGlyZWN0IHRhc2tzIGxpc3QgZm9yIHJldHJ5IGZ1bmN0aW9uYWxpdHkuIiIiCiAgICBnbG9iYWwgRElSRUNUX1RBU0tTCiAgICBESVJFQ1RfVEFTS1MgPSBsaXN0KHRhc2tzKQoKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLSBSZS1leHBvcnQga2V5IGZ1bmN0aW9ucyBmcm9tIGRmciBtb2R1bGVzIC0tLS0tLS0tLS0tLS0tLS0tLS0tCgojIEF1dGggZnVuY3Rpb25zCmZyb20gZGZyLmF1dGggaW1wb3J0IGdldF9zZXJ2aWNlX2FuZF9jcmVkcywgZ2V0X3NlcnZpY2VfaWZfdG9rZW5fdmFsaWQsIGdldF9hY2NvdW50X2luZm8sIHRyeV9nZXRfYWNjb3VudF9pbmZvCgojIFV0aWxpdHkgZnVuY3Rpb25zICAKZnJvbSBkZnIudXRpbHMgaW1wb3J0IGh1bWFuX2J5dGVzLCBlbGFwc2VkLCBleHRyYWN0X2ZvbGRlcl9pZCwgc2FmZV9maWxlbmFtZSwgZW5zdXJlX2RpciwgYmFja29mZl9zbGVlcCwgY2xhc3NpZnlfbWVkaWEKCiMgUHJvY2Vzc2luZyBmdW5jdGlvbnMKZnJvbSBkZnIucHJvY2VzcyBpbXBvcnQgcHJvY2Vzc19maWxlLCBwcmludF9mb2xkZXJfc3VtbWFyeSwgcHJpbnRfZ3JhbmRfc3VtbWFyeSwgcHJpbnRfcHJvZ3Jlc3MKCiMgTGlzdGluZyBmdW5jdGlvbnMKZnJvbSBkZnIubGlzdGluZyBpbXBvcnQgcmVzb2x2ZV9mb2xkZXIsIHdhaXRfaWZfcGF1c2VkLCBsaXN0X2ZvbGRlcl9yZWN1cnNpdmUsIGdldF9pdGVtLCBnYXBpX2V4ZWN1dGVfd2l0aF9yZXRyeQoKIyBEb3dubG9hZCBmdW5jdGlvbnMKZnJvbSBkZnIuZG93bmxvYWRzIGltcG9ydCBjbGVhbnVwX2luY29tcGxldGVfdGFyZ2V0cywgZG93bmxvYWRfdGh1bWJuYWlsLCBkb3dubG9hZF9maWxlX3Jlc3VtYWJsZSwgZG93bmxvYWRfdmlkZW9fcmVzdW1hYmxlCgojIFByZS1zY2FuIGZ1bmN0aW9ucwpmcm9tIGRmci5wcmVzY2FuIGltcG9ydCBwcmVzY2FuX3Rhc2tzCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgdHJ5OgogICAgICAgIG1haW4oKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIGxvZ2dpbmcuZXhjZXB0aW9uKEwoZiJGYXRhbCBlcnJvcjoge2V9IiwgZiJLZXNhbGFoYW4gZmF0YWw6IHtlfSIpKQogICAgICAgIHByaW50X2dyYW5kX3N1bW1hcnkoKQogICAgICAgIGV4aXQoMSkAAAAAAAAAAH0WAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "gui/main_app.py",
			"settings":
			{
				"buffer_size": 36188,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAJAIAAAAAAAAkAgAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA1TsAAAAAAADVOwAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA1TsAAAAAAADVOwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "# Modularization Summary\n\nThis document summarizes the modularization work completed on the ontahood-downloader project.\n\n## Overview\n\nThe project has been successfully modularized to improve code organization, maintainability, and readability. The work included:\n\n1. **GUI Modularization**: Broke down the monolithic `drive_fetch_gui.py` into a modular `gui/` package\n2. **Backend Integration**: Updated the GUI to work with the existing `dfr/` modular backend package  \n3. **Entry Point Modernization**: Created new entry points and updated build scripts\n4. **Documentation Updates**: Updated all references to use new entry points\n5. **Cleanup**: Removed redundant files while preserving backups\n\n## New Structure\n\n### GUI Package (`gui/`)\n- `__init__.py` - Package initialization\n- `main_app.py` - Main application class and UI logic\n- `components.py` - Reusable UI components and widgets\n- `workers.py` - Background worker functions for downloads and conversion\n- `preferences.py` - User preference management\n- `i18n.py` - Internationalization support (English/Indonesian)\n- `config.py` - Configuration constants and settings\n- `utils.py` - GUI utility functions\n- `log_handler.py` - Custom logging handler for GUI integration\n\n### Backend Package (`dfr/`)\nThe existing modular backend package remains unchanged:\n- `main.py` - Main orchestration logic\n- `auth.py` - Authentication and OAuth handling\n- `utils.py` - Utility functions and helpers\n- `downloads.py` - File download logic\n- `listing.py` - Drive folder listing and scanning\n- `prescan.py` - Pre-scan operations\n- `process.py` - File processing logic\n- `logfmt.py` - Logging formatting\n\n### Entry Points\n- **GUI**: `gui_main.py` - New modular GUI entry point (replaces `drive_fetch_gui.py`)\n- **CLI**: `drive_fetch_resilient.py` - Backend CLI interface (unchanged functionality)\n\n## Key Improvements\n\n### Code Organization\n- **Separation of Concerns**: GUI components are cleanly separated from business logic\n- **Modularity**: Each module has a specific, focused responsibility\n- **Reusability**: Components can be easily reused and tested independently\n- **Maintainability**: Smaller, focused files are easier to understand and modify\n\n### Architecture Benefits\n- **Clean Dependencies**: Clear separation between GUI, backend, and utility code\n- **Testability**: Modular structure makes unit testing much easier\n- **Extensibility**: New features can be added without touching unrelated code\n- **Documentation**: Each module is self-contained with clear interfaces\n\n### User Experience\n- **Unchanged Functionality**: All existing features work exactly the same\n- **Same Interface**: Users see the same bilingual GUI with identical functionality\n- **Performance**: No performance impact from modularization\n- **Stability**: Extensive testing ensures reliability\n\n## Migration Details\n\n### What Changed\n- **Entry Point**: Use `python3 gui_main.py` instead of `python3 drive_fetch_gui.py`\n- **Build Script**: Updated `pre-commit.sh` to package the new GUI entry point\n- **Documentation**: Updated `WARP.md` to reflect new entry points\n\n### What Stayed the Same\n- **All GUI functionality** - downloads, conversion, progress tracking, logging\n- **All CLI functionality** - headless operation, scripting interface\n- **All configuration** - same settings, credentials, output formats\n- **All dependencies** - same `requirements.txt`\n\n### Backup Files\nOriginal files preserved as backups:\n- `drive_fetch_gui.py.backup` - Original monolithic GUI\n- `odl.backup/` - Unused alternative backend package\n\n## Testing Results\n\n✅ **GUI Launch**: New modular GUI starts without errors\n✅ **Import Tests**: All modules import cleanly  \n✅ **Functionality**: Download and conversion features work correctly\n✅ **Logging**: Progress tracking and error handling work as expected\n✅ **Bilingual Support**: English/Indonesian language switching works\n✅ **CLI Compatibility**: Backend CLI interface unchanged\n\n## Future Improvements\n\nThe modular structure now enables:\n- **Unit Testing**: Individual modules can be tested in isolation\n- **Feature Extensions**: New GUI features can be added cleanly\n- **Alternative UIs**: Different frontend interfaces could reuse the backend\n- **Code Quality**: Linting and formatting can be applied more effectively\n- **Documentation**: Auto-generated API documentation from module docstrings\n\n## Files Modified\n\n### Updated Files\n- `WARP.md` - Updated entry points and commands\n- `pre-commit.sh` - Updated PyInstaller to use new GUI entry point\n- `gui/workers.py` - Updated to use modular dfr backend\n\n### New Files  \n- `gui_main.py` - New modular GUI entry point\n- `gui/` package - Complete modular GUI implementation\n- `MODULARIZATION_SUMMARY.md` - This documentation  \n\n## Conclusion\n\nThe modularization has been completed successfully with:\n- ✅ **Zero functional regression** - everything works exactly as before  \n- ✅ **Improved code organization** - clean, maintainable structure\n- ✅ **Enhanced developer experience** - easier to understand and modify\n- ✅ **Future-proof architecture** - ready for additional features and improvements\n\nThe project now has a modern, maintainable codebase while preserving all existing functionality and user workflows.\n",
			"file": "MODULARIZATION_SUMMARY.md",
			"file_size": 5250,
			"file_write_time": 134038511746911927,
			"settings":
			{
				"buffer_size": 5232,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					2,
					"left_delete",
					null,
					"AgAAAIkSAAAAAAAAiRIAAAAAAAB6AAAAIyMjIEJhY2t1cCBGaWxlcwotIGBkcml2ZV9mZXRjaF9ndWkucHkuYmFja3VwYCAtIE9yaWdpbmFsIEdVSSBwcmVzZXJ2ZWQKLSBgb2RsLmJhY2t1cC9gIC0gVW51c2VkIGJhY2tlbmQgcGFja2FnZSBwcmVzZXJ2ZWSIEgAAAAAAAIgSAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAAxMAAAAAAACJEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"left_delete",
					null,
					"AQAAAIcSAAAAAAAAhxIAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAiBIAAAAAAACIEgAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"ensure_newline_at_eof",
					null,
					"AQAAAG0UAAAAAAAAbhQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhxIAAAAAAACHEgAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAIcSAAAAAAAAiRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhxIAAAAAAACHEgAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"pret",
				"Pretty JSON: Format JSON"
			],
			[
				"pretty ",
				"Pretty JSON: Format JSON"
			],
			[
				"json",
				"Set Syntax: JSON"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/danielyakobian/Developer/ontahood-downloader",
		"/Users/danielyakobian/Developer/ontahood-downloader/dfr",
		"/Users/danielyakobian/Developer/ontahood-downloader/gui"
	],
	"file_history":
	[
		"/Users/danielyakobian/Developer/trailsight-web/docker-compose.dev.yml",
		"/Users/danielyakobian/Developer/trailsight-web/package.json",
		"/Users/danielyakobian/Developer/trailsight-web/server.js",
		"/Users/danielyakobian/Developer/trailsight-web/index.html",
		"/Users/danielyakobian/Developer/ontahood-downloader/temp.py",
		"/Users/danielyakobian/Developer/ontahood-downloader/.envrc",
		"/Users/danielyakobian/.zshrc",
		"/Users/danielyakobian/Developer/ontahood-downloader/drive_fetch_resilient.py",
		"/Users/danielyakobian/Developer/ontahood-downloader/drive_fetch_gui.py",
		"/Users/danielyakobian/Developer/ontahooddownloader/terms.html",
		"/Users/danielyakobian/Developer/ontahooddownloader/index.html",
		"/Users/danielyakobian/Developer/ontahooddownloader/README.md",
		"/Users/danielyakobian/Developer/ontahooddownloader/privacy.html",
		"/Users/danielyakobian/Developer/drive-gui/drive_fetch_gui.py",
		"/Users/danielyakobian/Developer/drive-gui/pre-commit.sh",
		"/Users/danielyakobian/Developer/scripts/scan_media_metadata.py",
		"/Users/danielyakobian/Developer/drive-gui/.git/hooks/pre-commit",
		"/Users/danielyakobian/Developer/drive-gui/README.md",
		"/Users/danielyakobian/Developer/drive-gui/drive_fetch_resilient.py",
		"/Users/danielyakobian/Developer/scripts/wifi_reconnect.sh",
		"/Users/danielyakobian/Developer/scripts/drive/drive_lowres_fetch.py",
		"/Users/danielyakobian/Developer/scripts/run_untrunc_on_broken.sh",
		"/Users/danielyakobian/Developer/scripts/reencode_preserve_fps.sh",
		"/Users/danielyakobian/Developer/scripts/#!:usr:bin:env bash.sh",
		"/Users/danielyakobian/Developer/scripts/batch_cfr_vtb.sh",
		"/Users/danielyakobian/Desktop/triage.sh",
		"/Users/danielyakobian/Desktop/triage_photorec.sh",
		"/Users/danielyakobian/Downloads/Daniel_Yakobian_Resume_UPDATED.tex",
		"/Users/danielyakobian/Downloads/test.txt",
		"/Users/danielyakobian/Downloads/keys.dmp",
		"/Users/danielyakobian/Movies/CapCut/User Data/Projects/com.lveditor.draft/root_meta_info.json",
		"/Users/danielyakobian/Movies/CapCut/User Data/Projects/com.lveditor.draft/template.json"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 98.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "drive_fetch_resilient.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5757,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3079.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "gui/main_app.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36188,
						"regions":
						{
						},
						"selection":
						[
							[
								15317,
								15317
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9460.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "MODULARIZATION_SUMMARY.md",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5232,
						"regions":
						{
						},
						"selection":
						[
							[
								4745,
								4745
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1869.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 31.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"pinned_build_system": "",
	"project": "ontahood-downloader.sublime-project",
	"replace":
	{
		"height": 58.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"packa",
				"package.json"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 488.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
